# Goodness of Fit

## Page 89 Fit Introduction

### Activate packages

```{r}
library(usethis) # use_github_file()
library(tidyverse) # read_csv() 
library(janitor) # clean_names() 
```

### Obtain data and save it to your computer

```{r}
#| include: false
use_github_file(repo_spec = "https://github.com/johnhoffmannVA/LinearRegression/blob/main/StateData2018.csv",
                save_as = "statedata2018.csv")

statedata2018 <- read_csv("statedata2018.csv", show_col_types = FALSE) %>% clean_names()
```

```{r}
#| eval: false
use_github_file(repo_spec = "https://github.com/johnhoffmannVA/LinearRegression/blob/main/StateData2018.csv",
                save_as = "statedata2018.csv")
```

#### Load data from your computer

Clean names is essential here. It makes sure all column names are lower case. They are not all lower case in the original data file.

```{r}
#| eval: false
statedata2018 <- read_csv("statedata2018.csv") %>% 
  clean_names()
```

### Inspect data

There are so many column names in this data set that we do the glimpse a bit differently. That is, we sort the order of the columns alphabetically prior to doing the glimpse(). It affects only the display of the column names - not the structure of the data.

```{r}
statedata2018 %>% 
  select(sort(names(statedata2018))) %>%
  glimpse()  
```

### Select focal variables

```{r}
focal_data <- statedata2018 %>%
  select(violent_crime_rate, per_child_poverty)
```

### Conduct Regression

```{r}
lm5_1 <- lm(violent_crime_rate ~ per_child_poverty,
            data = focal_data)
```

### Approach 1: Regression fit

```{r}
summary(lm5_1)
anova(lm5_1)
```

### Approach 2: Regression fit (better)

```{r}
##library(tidymodels)
#glance(lm5_1)
#anova(lm5_1)
```

## Page 96 Single Value Prediction Interval

### Load Data

```{r}
focal_data <- statedata2018 %>%
  select(violent_crime_rate, per_child_poverty)
```

### Conduct Regression

```{r}
lm5_2 <- lm(violent_crime_rate ~ per_child_poverty, 
            data = focal_data)
```



```{r}
# Specify values for which you want predictions
predict4value = data.frame(per_child_poverty = 16.5)
print(predict4value)

# Create prediction interval
stats::predict(lm5_2, 
        newdata = predict4value,
        interval = "prediction")

```


### Graph Single Value PI

The plot below illustrates the prediction interval. 

```{r}
ggplot(data = focal_data,
       mapping = aes(x = per_child_poverty,
                     y = violent_crime_rate)) +
  geom_point() +
  geom_smooth(method = "lm") +
  annotate(geom = "segment",
           x = 16.5, xend = 16.5,
           y = 112.1599, yend = 572.3843,
           linewidth = 1.5,
           color = "red") +
  scale_x_continuous(breaks = seq(9, 30, by = 1)) +
  scale_y_continuous(breaks = seq(100, 700, by = 100))

```

Recall that we have a sample. The sample is a subset of the population of values. The red line in the plot indicates a range that will capture 95% of population values when x = 16.5. 


