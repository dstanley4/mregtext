# Indicator Variables

## Required packages

The following CRAN packages must be installed:

| Required CRAN Packages |
|------------------------|
| tidyverse              |
| usethis                |
| janitor                |
| skimr                  |
| tidymodels             |


## Page 118 Single Categorical Predictor

```{r}
#| eval: false

library(usethis) # use_github_file 
library(tidyverse) # read_csv()
library(janitor) # clean_names() 
library(skimr) # skim()
library(tidymodels) #tidy() glance()
```

```{r}
#| include: false

library(usethis) # use_github_file 
library(tidyverse) # read_csv()
library(janitor) # clean_names() 
library(skimr) # skim()
library(tidymodels) #tidy() glance()
```

### Obtain data and save it to your computer

```{r}
#| include: false
use_github_file(repo_spec = "https://github.com/johnhoffmannVA/LinearRegression/blob/main/GSS2018.csv",
                save_as = "gss2018.csv")

gss2018 <- read_csv("gss2018.csv", show_col_types = FALSE) %>% clean_names()
```

```{r}
#| eval: false
use_github_file(repo_spec = "https://github.com/johnhoffmannVA/LinearRegression/blob/main/GSS2018.csv",
                save_as = "gss2018.csv")
```

### Load data from your computer

```{r}
#| eval: false
gss2018 <- read_csv("gss2018.csv") %>% 
  clean_names()
```

### Inspect data

```{r}
gss2018 %>% 
  glimpse()  
```

Notice female is a chr variable. 

### Making female a factor (don't skip this step)

We need to make female a factor variable. Then indicate that female is the reference. That is female = 0 and male = 1.

```{r}
gss2018 <- gss2018 %>%
  mutate(female = as_factor(female)) %>%
  mutate(female = relevel(female, ref = "female"))
```


See how female is now a factor:

```{r}
gss2018 %>% 
  glimpse()  
```

### Group means

```{r}
# We use as.data.frame() to get more decimals

gss2018 %>% 
  group_by(female) %>%
  summarise(group_mean = mean(pincome)) %>%
  as.data.frame()

```



### Regression (as per textbook)

```{r}
lm7_1 <- lm(pincome ~ female,
            data = gss2018)
```


```{r}
#| eval: false
tidy(lm7_1)
```

```{r}
#| eval: true
#| echo: false
knitr::kable(tidy(lm7_1))
```



```{r}
#| echo: false

ggplot(data = gss2018,
       mapping = aes(x = female,
                     y = pincome)) +
  stat_summary(fun = "mean",
               geom="bar") +
  annotate(geom = "text", label = "8.221350", x= 1, y = 8.221350+.5) +
  annotate(geom = "text", label = "8.221350 + 2.660494 = 10.88184", x= 2, y = 8.221350+2.660494+.5) +
  scale_y_continuous(breaks = seq(0, 15)) +
  theme_classic(12)
```



```{r}
#| eval: false
ggplot(data = gss2018,
       mapping = aes(x = female,
                     y = pincome)) +
  stat_summary(fun = "mean",
               geom="bar") +
  scale_y_continuous(breaks = seq(0, 15)) +
  theme_classic(12)
```

### Explanation Part 1: Fewer Cases

Let's look at a subset of the data to understand what happened above. We'll look at the first 20 rows of the data, and do the analysis again.

```{r}
gss_small <- gss2018 %>%
  select(pincome, female) %>%
  slice_head(n = 20)
```

```{r}
print(gss_small)
```


```{r}
gss_small <- gss_small %>%
  mutate(female = as_factor(female)) %>%
  mutate(female = relevel(female, ref = "female"))
```

Let's check out the group means for this smaller data set:

```{r}
# We use as.data.frame() to get more decimals

gss_small %>% 
  group_by(female) %>%
  summarise(group_mean = mean(pincome)) %>%
  as.data.frame()

```


Now let's do the regression:

```{r}
lm7_small <- lm(pincome ~ female,
            data = gss_small)
```


```{r}
#| eval: false
tidy(lm7_small)
```

```{r}
#| eval: true
#| echo: false
knitr::kable(tidy(lm7_small))
```



```{r}
#| echo: false

ggplot(data = gss_small,
       mapping = aes(x = female,
                     y = pincome)) +
  stat_summary(fun = mean,
               geom="bar") +
  annotate(geom = "text", label = "8.166667", x= 1, y = 8.221350+.5) +
  annotate(geom = "text", label = "8.166667 + 7.958333 = 16.125", x= 2, y = 8.221350+7.958333+.5) +
  scale_y_continuous(breaks = seq(0, 20)) +
  theme_classic(12)
```



```{r}
#| eval: false

ggplot(data = gss_small,
       mapping = aes(x = female,
                     y = pincome)) +
  stat_summary(fun = mean,
               geom="bar") +
  scale_y_continuous(breaks = seq(0, 20)) +
  theme_classic(12)
```


### Explanation Part 2: Numeric Coding

We create a column with 0 for female and 1 for male. 

```{r}
gss_numeric_small <- gss_small

gss_numeric_small$reference_female <-0

id <- gss_numeric_small$female == "male"
gss_numeric_small$reference_female[id] <- 1

print(gss_numeric_small)
```

Now let's do the regression again!

```{r}
lm7_numeric_small <- lm(pincome ~ reference_female,
            data = gss_numeric_small)
```


```{r}
#| eval: false
tidy(lm7_numeric_small)
```

```{r}
#| eval: true
#| echo: false
knitr::kable(tidy(lm7_numeric_small))
```



```{r}
#| echo: false

ggplot(data = gss_numeric_small,
       mapping = aes(x = reference_female,
                     y = pincome)) +
  stat_summary(fun = mean,
               geom="bar") +
  annotate(geom = "text", label = "8.166667", x= 0, y = 8.221350+.5) +
  annotate(geom = "text", label = "8.166667 + 7.958333 = 16.125", x= 1, y = 8.221350+7.958333+.5) +
  scale_y_continuous(breaks = seq(0, 20)) +
  theme_classic(12)
```


```{r}
#| eval: false

ggplot(data = gss_numeric_small,
       mapping = aes(x = reference_female,
                     y = pincome)) +
  stat_summary(fun = mean,
               geom="bar") +
  scale_y_continuous(breaks = seq(0, 20)) +
  theme_classic(12)
```

## Page 120 Single Categorical t-test

```{r}
t.test(pincome ~ female, gss2018)

```

```{r}
# We use as.data.frame() to get more decimals

gss2018 %>% 
  group_by(female) %>%
  summarise(group_mean = mean(pincome)) %>%
  as.data.frame()

```


## Page 122 Multiple Categorical Predictor

```{r}
gss2018 <- gss2018 %>%
  mutate(female = as_factor(female)) %>%
  mutate(female = relevel(female, ref = "female"))

```

```{r}
gss2018 <- gss2018 %>%
  mutate(ethnic = as_factor(ethnic)) %>%
  mutate(ethnic = relevel(ethnic, ref = "White"))

```




```{r}
lm7_2 <- lm(pincome ~ female + ethnic, data = gss2018)

```


```{r}
#| eval: false
library(tidymodels)
tidy(lm7_2)
```

```{r}
#| echo: false
library(tidymodels)
knitr::kable(tidy(lm7_2))
```

The intercept corresponds to the cell composed of both reference groups (White/Female). Each weight is the change associated that category membership.
Each cell mean (excluding combined reference group: white/female) is obtained by combining multiple regression weights.

```{r}
#| include: false
# We use as.data.frame() to get more decimals

cell_means <- gss2018 %>% 
  group_by(female, ethnic) %>%
  summarise(pincome_mean = mean(pincome)) %>%
  as.data.frame()

```


```{r}
#| include: false
cell_means <- cell_means %>%
  unite("cell_label", female, ethnic)
```

```{r}
#| echo: false
ggplot(data = cell_means,
       mapping = aes(x = cell_label,
                     y = pincome_mean)) +
  geom_col() +
  scale_y_continuous(breaks = seq(0, 16, by = 1)) + 
  coord_cartesian(ylim = c(0, 15)) +
  theme(axis.text.x = element_text(angle = 60, 
                                   hjust = 1))  

```


```{r}
#| eval: true
# We use as.data.frame() to get more decimals

cell_means <- gss2018 %>% 
  group_by(female, ethnic) %>%
  summarise(pincome_mean = mean(pincome)) %>%
  as.data.frame()

print(cell_means)
```


```{r}
#| eval: true
cell_means <- cell_means %>%
  unite("cell_label", female, ethnic)

print(cell_means)
```

```{r}
#| eval: false
ggplot(data = cell_means,
       mapping = aes(x = cell_label,
                     y = pincome_mean)) +
  geom_col() +
  scale_y_continuous(breaks = seq(0, 16, by = 1)) + 
  coord_cartesian(ylim = c(0, 15)) +
  theme(axis.text.x = element_text(angle = 60, 
                                   hjust = 1))  

```


## Page 125 Two Categorical Predictors (ANCOVA)

Notice the fund column in the glimpse output. Notice that is a chr column.

```{r}
gss2018 %>%
  select(sort(names(gss2018))) %>%
  glimpse()
```

We convert it to factor:

```{r}
gss2018 <- gss2018 %>%
  mutate(fund = as_factor(fund))
```

The we check out the levels of that factor:

```{r}
gss2018 %>%
  pull(fund) %>%
  fct_count()
```



We see there are four levels to this factor: moderate, liberal, fundamentalist, none. We also see how many people are at each level.

But we want there to be only two levels: fundamentalist, not_fundamentalist. How do we do that? We collapse moderate, liberal, none into non_fundamentalist.

```{r}
gss2018 <- gss2018 %>%
  mutate(fund = fct_collapse(fund,
                             not_fundamentalist = c("moderate",
                                                    "liberal",
                                                    "none") ) )
```

Now we check the levels of our factor and we can see it worked. The number of people is the same for fundamentalist, 539 people, and all the other groups have been collapsed into a single category called not_fundamentalist with 1776 people.


```{r}
gss2018 %>%
  pull(fund) %>%
  fct_count()
```

We can no use fund as predictor that simply indicates fundamentalist or not. We are going to use a treatment contrast for this analysis. Therefore, we need to see the reference group. We set the reference group (i.e., the group that will have it's mean represented by the intercept) as the non_fundamentalist group.

```{r}
gss2018 <- gss2018 %>%
  mutate(fund = relevel(fund, ref = "not_fundamentalist"))
```

Recall we set "female" the as the reference group for the female variable previously:

```{r}
#| eval: false
gss2018 <- gss2018 %>%
  mutate(female = as_factor(female)) %>%
  mutate(female = relevel(female, ref = "female"))

```



Now we create out linear model predicting FAMILY income represented by fincome. We have two categorical predictors: fund and female. We also have one numerical predictor, educate, which indicates years of education.

```{r}
lm7_3 <- lm(fincome ~ fund + female, data = gss2018)
```

We can see the regression weights with tidy():

```{r}
#| eval: false

library(tidymodels)

tidy(lm7_3)
```

```{r}
#| echo: false
library(tidymodels)

knitr::kable(tidy(lm7_3))
```

We can see the confidence intervals for those weights weights with confint():

```{r}
confint(lm7_3)
```

And the overall summary info with glance(). The $R^2$ value indicates very little variance in family income is accounted for (< 1%) with this model. So although we have weights - the model doesn't seem to do much.


```{r}
#| eval: false
glance(lm7_3)
```

```{r}
#| echo: false
knitr::kable(glance(lm7_3))
```


## Page 126 One Continuous Two Categorical Predictors

Now we add education (years of education) as a continuous predictor:

```{r}
lm7_4 <- lm(fincome ~ fund + female + educate, data = gss2018)
```

We can see the regression weights with tidy():

```{r}
#| eval: false

library(tidymodels)

tidy(lm7_4)
```

```{r}
#| echo: false
library(tidymodels)

knitr::kable(tidy(lm7_4))
```

We can see the confidence intervals for those weights weights with confint():

```{r}
confint(lm7_4)
```

And the overall summary info with glance():


```{r}
#| eval: false
glance(lm7_4)
```

```{r}
#| echo: false
knitr::kable(glance(lm7_4))
```

## Page 129 Predicted Means

The textbook may have used an approach that leads to incorrect values due to the way factors are handled.
Put both levels of the the factors in the same data frame for prediction.
Then explicity set the factors as before. Otherwise the reference group may get set differenctly than the orignal analysis and this can cause problems (and incorrect predictions).

```{r}
library(tidyverse)

predict4values <- data.frame(fund = c("not_fundamentalist",
                                      "not_fundamentalist",
                                      "fundamentalist",
                                      "fundamentalist"),
                             female =  c("male",
                                         "female",
                                         "male",
                                         "female"),
                             educate = 12)


predict4values <- predict4values %>%
  mutate(fund = as_factor(fund)) %>%
  mutate(fund = relevel(fund, ref = "not_fundamentalist")) %>%
  mutate(female = as_factor(female)) %>%
  mutate(female = relevel(female, ref = "female"))

print(predict4values)
```

We will now create predicted value for the predictor values above:

```{r}
predicted_fincome <- predict(lm7_4, predict4values)


predict4values <- predict4values %>%
  mutate(predicted_mean_adj_4_edu = predicted_fincome)

print(predict4values)
```


```{r}
actual_means <- gss2018 %>%
  group_by(fund, female) %>%
  summarise(group_mean = mean(fincome))

print(actual_means)
```

Now let's combine them into a single table:

```{r}
full_join(predict4values, actual_means)
```


